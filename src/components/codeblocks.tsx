import styled from '@emotion/styled';
// Load any languages you want to use
// (see https://github.com/isagalaev/highlight.js/tree/master/src/languages)
import js from 'highlight.js/lib/languages/javascript';
import 'highlight.js/styles/dracula.css';
import React, {FunctionComponent, useRef, useState} from 'react';
import Lowlight from 'react-lowlight';

Lowlight.registerLanguage('js', js);
const CodeBlockContainer = styled.div`
	display: block;
	.hljs {
		border-radius: 0.2em;
	}
	pre {
		margin: 0;
	}
`;

type CodeBlockPropsType = {
	language:
		| '1c'
		| 'abnf'
		| 'accesslog'
		| 'actionscript'
		| 'ada'
		| 'angelscript'
		| 'apache'
		| 'applescript'
		| 'arcade'
		| 'arduino'
		| 'armasm'
		| 'asciidoc'
		| 'aspectj'
		| 'autohotkey'
		| 'autoit'
		| 'avrasm'
		| 'awk'
		| 'axapta'
		| 'bash'
		| 'basic'
		| 'bnf'
		| 'brainfuck'
		| 'c-like'
		| 'c'
		| 'cal'
		| 'capnproto'
		| 'ceylon'
		| 'clean'
		| 'clojure-repl'
		| 'clojure'
		| 'cmake'
		| 'coffeescript'
		| 'coq'
		| 'cos'
		| 'cpp'
		| 'crmsh'
		| 'crystal'
		| 'csharp'
		| 'csp'
		| 'css'
		| 'd'
		| 'dart'
		| 'delphi'
		| 'diff'
		| 'django'
		| 'dns'
		| 'dockerfile'
		| 'dos'
		| 'dsconfig'
		| 'dts'
		| 'dust'
		| 'ebnf'
		| 'elixir'
		| 'elm'
		| 'erb'
		| 'erlang-repl'
		| 'erlang'
		| 'excel'
		| 'fix'
		| 'flix'
		| 'fortran'
		| 'fsharp'
		| 'gams'
		| 'gauss'
		| 'gcode'
		| 'gherkin'
		| 'glsl'
		| 'gml'
		| 'go'
		| 'golo'
		| 'gradle'
		| 'groovy'
		| 'haml'
		| 'handlebars'
		| 'haskell'
		| 'haxe'
		| 'hsp'
		| 'htmlbars'
		| 'http'
		| 'hy'
		| 'inform7'
		| 'ini'
		| 'irpf90'
		| 'isbl'
		| 'java'
		| 'javascript'
		| 'jboss-cli'
		| 'json'
		| 'julia-repl'
		| 'julia'
		| 'kotlin'
		| 'lasso'
		| 'latex'
		| 'ldif'
		| 'leaf'
		| 'less'
		| 'lisp'
		| 'livecodeserver'
		| 'livescript'
		| 'llvm'
		| 'lsl'
		| 'lua'
		| 'makefile'
		| 'markdown'
		| 'mathematica'
		| 'matlab'
		| 'maxima'
		| 'mel'
		| 'mercury'
		| 'mipsasm'
		| 'mizar'
		| 'mojolicious'
		| 'monkey'
		| 'moonscript'
		| 'n1ql'
		| 'nginx'
		| 'nim'
		| 'nix'
		| 'node-repl'
		| 'nsis'
		| 'objectivec'
		| 'ocaml'
		| 'openscad'
		| 'oxygene'
		| 'parser3'
		| 'perl'
		| 'pf'
		| 'pgsql'
		| 'php-template'
		| 'php'
		| 'plaintext'
		| 'pony'
		| 'powershell'
		| 'processing'
		| 'profile'
		| 'prolog'
		| 'properties'
		| 'protobuf'
		| 'puppet'
		| 'purebasic'
		| 'python-repl'
		| 'python'
		| 'q'
		| 'qml'
		| 'r'
		| 'reasonml'
		| 'rib'
		| 'roboconf'
		| 'routeros'
		| 'rsl'
		| 'ruby'
		| 'ruleslanguage'
		| 'rust'
		| 'sas'
		| 'scala'
		| 'scheme'
		| 'scilab'
		| 'scss'
		| 'shell'
		| 'smali'
		| 'smalltalk'
		| 'sml'
		| 'sqf'
		| 'sql'
		| 'sql_more'
		| 'stan'
		| 'stata'
		| 'step21'
		| 'stylus'
		| 'subunit'
		| 'swift'
		| 'taggerscript'
		| 'tap'
		| 'tcl'
		| 'thrift'
		| 'tp'
		| 'twig'
		| 'typescript'
		| 'vala'
		| 'vbnet'
		| 'vbscript-html'
		| 'vbscript'
		| 'verilog'
		| 'vhdl'
		| 'vim'
		| 'x86asm'
		| 'xl'
		| 'xml'
		| 'xquery'
		| 'yaml'
		| 'zephir';
};

export const CodeBlock: FunctionComponent<CodeBlockPropsType> = ({
	children,
	language,
}) => {
	const codeRef = useRef<HTMLElement>(null);

	const [isPopoverOpen, setIsPopoverOpen] = useState(false);

	return (
		<CodeBlockContainer>
			<Lowlight language="js" value={children} />
		</CodeBlockContainer>
	);
};
